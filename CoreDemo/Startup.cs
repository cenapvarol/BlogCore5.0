using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.AspNetCore.Mvc.Authorization;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace CoreDemo
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddControllersWithViews();

            //Session yani oturumu açabilmesi için bu parametrennin yazýlmasý gerekiyor.
            services.AddSession();

            //Yazmýþ olduðumuz servise proje seviyesinde Authorize etmiþ oluyoruz  yani sisteme login olmayan kullanýcý uygulamalara eriþimi engellenmiþ olacak.
            services.AddMvc(config =>
            {
                var policy = new AuthorizationPolicyBuilder()
                        .RequireAuthenticatedUser()
                        .Build();
                config.Filters.Add(new AuthorizeFilter(policy));

            });

            //Burada yapmak i,stediðimiz iþlem ise  Layout da buluna login olmadan anasayfaya veya baþka sekmeye  týkladýðýnda login sayfasýna yönlendirlmesi.
            services.AddMvc();
            services.AddAuthentication(
                CookieAuthenticationDefaults.AuthenticationScheme)
                .AddCookie(x =>
                {
                    x.LoginPath = "/Login/Index";

                }
                );

        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler("/Home/Error");
                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
                app.UseHsts();
            }

            //Eklemiþ olduðumuz aþaðýdaki parametre kullanýcý url kýsmýný yanlýþ girdiðinde kullanýcýya hatayý göstermek ve ana sayfaya yönlendirmek
            app.UseStatusCodePagesWithReExecute("/ErrorPage/Error1", "?code={0}");

            app.UseHttpsRedirection();
            app.UseStaticFiles();

            //Authorize iþlemi için bu parametreninde eklenmesi gerekiyor.
            app.UseSession();

            //Authorize Authentication iþlemi için bu parametreninde eklenmesi gerekiyor.
            app.UseAuthentication();

            app.UseRouting();

            //Authorize iþlemi için bu parametreninde eklenmesi gerekiyor.
            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllerRoute(
                    name: "default",
                    pattern: "{controller=Home}/{action=Index}/{id?}");
            });
        }
    }
}
